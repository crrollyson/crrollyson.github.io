jQuery(document).ready(function($) {
    function e() {
        $("a[href^='http']").attr("target", "_blank");
        // $("#formRequest").submit(function() {
        //     SendMail();
        //     return false;
        // });

        // var form = document.getElementById('formRequest');
        // form.addEventListener('submit', function(event) {
        //     event.preventDefault();

        //     ga('send', {
        //         hitType: 'event',
        //         eventCategory: 'Form Submission',
        //         eventAction: 'submit',
        //         eventLabel: '2016 Initial Launch Campaign'
        //     }, {
        //         hitCallback: createFunctionWithTimeout(function(){
        //             //SendMail();
        //             alert('tracking sent');
        //         })
        //     });
        // });


        analyticTracking('[data-event-location]');

        // scrollioreceiver('[data-sender]');
        quoterotator('blockquote.slider');

        // var card = $('.card div p');
        // equalheight(card);
        // $(window).load(function(){equalheight(card);});
        // $(window).resize(function(){equalheight(card);});

    };
    e();
});



analyticTracking = function(referrer) {
    /*
        We want to use window.location for any permalink visits to the site
        Click events in this case would have to be manually configured and
        --create additional coding

        TODO
        »» Tie User Name Into Metric Via URL
            Add User Name To Metric

            Appears only location is being sent – need to combine info
    */
    $(referrer).on({
        click: gaPage
    });

    function gaPage() {
        event.preventDefault();
        var visitor = window.location.hash.substring(1) || 'Guest',
            location = $(this).attr('data-event-location'),
            visloc = visitor + ' ' + location;
        // createFunctionWithTimeout(function() {
        //     console.log('fire');
        // })
        ga('send', {
            hitType: 'event',
            eventCategory: 'Cards Clicked',
            eventAction: 'Click',
            eventLabel: visloc // dynamic value
        }, {
            hitCallback: createFunctionWithTimeout(function() {
                console.log('card info success '+ visloc);
            })
        })
    }

    // function gaPage() {
    //     var visitor = window.location.hash.substring(1) || 'guest',
    //         location = $(this).attr('data-event-location');

    //     ga('set', 'page', visitor);
    //     ga('set', 'page', location);
    //     ga('send', 'pageview');
    //     console.log(visitor + ' ' +location);
    // }


}




// scrollioreceiver = function(sender) {

//     $(sender).on({
//         click: sentFrom
//     });

//     function sentFrom(){
//         var dataMine = $(this).attr('data-sender'),
//             dataSend = $('[data-receiver="'+dataMine+'"]');

//         $('html, body').animate({
//             scrollTop: $(dataSend).offset().top - 70
//         }, 800, function() {
//             $('#navbar').removeClass('in');
//         });
//     }
// }


// equalheight = function(container) {

//     var currentTallest = 0,
//         currentRowStart = 0,
//         rowDivs = new Array(),
//         $el,
//         topPosition = 0;

//     $(container).each(function() {

//         $el = $(this);
//         $($el).height("auto");
//         topPostion = $el.position().top;

//         if (currentRowStart != topPostion) {
//             for (currentDiv = 0; currentDiv < rowDivs.length; currentDiv++) {
//                 rowDivs[currentDiv].height(currentTallest);
//             }
//             rowDivs.length = 0; // empty the array
//             currentRowStart = topPostion;
//             currentTallest = $el.height();
//             rowDivs.push($el);
//         } else {
//             rowDivs.push($el);
//             currentTallest = (currentTallest < $el.height()) ? ($el.height()) : (currentTallest);
//         }
//         for (currentDiv = 0; currentDiv < rowDivs.length; currentDiv++) {
//             rowDivs[currentDiv].height(currentTallest);
//         }
//     });
// }


quoterotator = function(quote) {

    /*

    1. show first element (add active, fade in)
    2. setInternal 3 to 4 seconds (creative interval function for setInterval('fun()', time))
    3. remove class » fadeOut, add to next » fadeIn on callback
    4. add pagination dynamically » only if quote.length
    5. match data-target of button to blockquote to remove current and set current of selected

    TODO
    6. add left/right keydown

    */

    // Setup » only if quote is greater than 1
    if ($(quote).length > 1) {

        var qContainer = $(quote).parent('div').attr('data-rotator', 'rotator'),
            fadeTime = 500,
            rotateTime = 4500,
            quoteStart = $(quote + ':first-of-type'),
            quoteActive = $(quote + '.current'),
            quoteNext = quoteActive.next(),
            pagination = $(quote).each(function(index) {
                $(this).attr('data-match', index);
                $(qContainer).append('<button data-target="' + index + '">o</button>');
            }),
            paginationActive = $('[data-target="0"]'),
            rotationInterval = setInterval(quoteInterval, rotateTime);

        // setup hide all quotes, fadeIn first quote, set pagination active
        $(quote).css('display', 'none');
        $(quoteStart).addClass('current').fadeIn(fadeTime);
        $(paginationActive).addClass('current');

    }

    // TODO
    // APPEND PAUSE ICON

    // $('[data-rotator]').on({
    //     mouseenter: rotateStopFunction,
    //     mouseleave: rotateRestartFunction
    // });

    $('[data-target]').on({
        click: paginationClickEvent
    });

    function quoteInterval() {
        var current = $(quote + '.current'),
            active = $('button.current');

        if (current.next(quote).length == 0) {
            current.removeClass('current').fadeOut(800, function() {
                quoteStart.addClass('current').fadeIn(800);
                active.not('[data-target="0"]').removeClass('current');
                $('[data-target="0"]').addClass('current');
            });
        } else {
            current.not(this).removeClass('current').fadeOut(800, function() {
                current.next(quote).addClass('current').fadeIn(800);
                active.removeClass('current').next('button').addClass('current');
            });
        };
    }

    function paginationClickEvent() {
        var matchAttr = $(this).attr('data-target');

        $(this).siblings('button').removeClass('current');
        $(this).addClass('current');

        $(quote).stop().removeClass('current').hide();
        $(quote + '[data-match="' + matchAttr + '"]').stop().addClass('current').fadeIn(fadeTime);
    };

    function rotateRestartFunction() {
        rotationInterval = setInterval(quoteInterval, rotateTime);
        $('[data-rotator]').animate({
            opacity: 1
        }, 300);
        // console.log('restart fn called');
    }

    function rotateStopFunction() {
        clearInterval(rotationInterval);
        $('[data-rotator]').animate({
            opacity: .8
        }, 300);
        // console.log('stop fn called');
    }


};


// utility function to handle analytic timeouts
function createFunctionWithTimeout(callback, opt_timeout) {
    var called = false;
    function fn() {
        if(!called) {
            called = true;
            callback();
        }
    }
    setTimeout(fn, opt_timeout || 1000);
    return fn;
}

